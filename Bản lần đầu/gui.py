# gui.py
"""
GUI interface cho Plagiarism Checker
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
from typing import Dict
from checker import PlagiarismChecker
from config import COLORS, MAX_REQUESTS_PER_DAY

class PlagiarismGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.checker = PlagiarismChecker()
        self.setup_window()
        self.create_widgets()
        self.current_report = None
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("Plagiarism Checker - Python Tool")
        self.root.geometry("900x700")
        self.root.configure(bg=COLORS['BACKGROUND'])
        
        # Icon v√† style
        style = ttk.Style()
        style.theme_use('clam')
        
    def create_widgets(self):
        """T·∫°o c√°c widget"""
        # Header
        header_frame = tk.Frame(self.root, bg=COLORS['PRIMARY'], height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(
            header_frame, 
            text="üîç PLAGIARISM CHECKER",
            font=("Arial", 20, "bold"),
            fg=COLORS['WHITE'],
            bg=COLORS['PRIMARY']
        )
        title_label.pack(expand=True)
        
        # Main container
        main_frame = tk.Frame(self.root, bg=COLORS['BACKGROUND'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Input section
        self.create_input_section(main_frame)
        
        # Progress section
        self.create_progress_section(main_frame)
        
        # Results section
        self.create_results_section(main_frame)
        
        # Footer
        self.create_footer()
        
    def create_input_section(self, parent):
        """T·∫°o ph·∫ßn nh·∫≠p vƒÉn b·∫£n"""
        input_frame = tk.LabelFrame(
            parent,
            text="üìù Nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra",
            font=("Arial", 12, "bold"),
            bg=COLORS['WHITE'],
            fg=COLORS['SECONDARY']
        )
        input_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Text area
        self.text_area = scrolledtext.ScrolledText(
            input_frame,
            height=8,
            font=("Arial", 11),
            wrap=tk.WORD,
            bg=COLORS['WHITE']
        )
        self.text_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Buttons frame
        button_frame = tk.Frame(input_frame, bg=COLORS['WHITE'])
        button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # Clear button
        clear_btn = tk.Button(
            button_frame,
            text="üóëÔ∏è X√≥a",
            font=("Arial", 10),
            bg=COLORS['SECONDARY'],
            fg=COLORS['WHITE'],
            command=self.clear_text,
            relief=tk.FLAT,
            padx=20
        )
        clear_btn.pack(side=tk.LEFT)
        
        # Sample text button
        sample_btn = tk.Button(
            button_frame,
            text="üìÑ VƒÉn b·∫£n m·∫´u",
            font=("Arial", 10),
            bg=COLORS['SECONDARY'],
            fg=COLORS['WHITE'],
            command=self.load_sample,
            relief=tk.FLAT,
            padx=20
        )
        sample_btn.pack(side=tk.LEFT, padx=(10, 0))
        
        # Check button
        self.check_btn = tk.Button(
            button_frame,
            text="üîç Ki·ªÉm tra ƒë·∫°o vƒÉn",
            font=("Arial", 12, "bold"),
            bg=COLORS['PRIMARY'],
            fg=COLORS['WHITE'],
            command=self.start_check,
            relief=tk.FLAT,
            padx=30
        )
        self.check_btn.pack(side=tk.RIGHT)
        
    def create_progress_section(self, parent):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn tr√¨nh"""
        self.progress_frame = tk.LabelFrame(
            parent,
            text="‚è≥ Ti·∫øn tr√¨nh ki·ªÉm tra",
            font=("Arial", 12, "bold"),
            bg=COLORS['WHITE'],
            fg=COLORS['SECONDARY']
        )
        
        # Progress bar
        self.progress_var = tk.StringVar(value="S·∫µn s√†ng ki·ªÉm tra...")
        self.progress_label = tk.Label(
            self.progress_frame,
            textvariable=self.progress_var,
            font=("Arial", 10),
            bg=COLORS['WHITE']
        )
        
        self.progress_bar = ttk.Progressbar(
            self.progress_frame,
            mode='determinate',
            length=400
        )
        
    def create_results_section(self, parent):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£"""
        self.results_frame = tk.LabelFrame(
            parent,
            text="üìä K·∫øt qu·∫£ ki·ªÉm tra",
            font=("Arial", 12, "bold"),
            bg=COLORS['WHITE'],
            fg=COLORS['SECONDARY']
        )
        
        # Results notebook
        self.notebook = ttk.Notebook(self.results_frame)
        
        # Summary tab
        self.summary_frame = tk.Frame(self.notebook, bg=COLORS['WHITE'])
        self.notebook.add(self.summary_frame, text="üìà T·ªïng quan")
        
        # Details tab
        self.details_frame = tk.Frame(self.notebook, bg=COLORS['WHITE'])
        self.notebook.add(self.details_frame, text="üìã Chi ti·∫øt")
        
        # Recommendations tab
        self.recommendations_frame = tk.Frame(self.notebook, bg=COLORS['WHITE'])
        self.notebook.add(self.recommendations_frame, text="üí° Khuy·∫øn ngh·ªã")
        
    def create_footer(self):
        """T·∫°o footer"""
        footer_frame = tk.Frame(self.root, bg=COLORS['SECONDARY'], height=30)
        footer_frame.pack(fill=tk.X)
        footer_frame.pack_propagate(False)
        
        footer_label = tk.Label(
            footer_frame,
            text="Powered by Google Custom Search API",
            font=("Arial", 9),
            fg=COLORS['WHITE'],
            bg=COLORS['SECONDARY']
        )
        footer_label.pack(expand=True)
        
    def clear_text(self):
        """X√≥a vƒÉn b·∫£n"""
        self.text_area.delete(1.0, tk.END)
        
    def load_sample(self):
        """Load vƒÉn b·∫£n m·∫´u"""
        sample_text = """Machine learning is a method of data analysis that automates analytical model building. It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention.

Deep learning is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Python is a high-level, interpreted programming language with dynamic semantics and simple, easy-to-learn syntax."""
        
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(1.0, sample_text)
        
    def start_check(self):
        """B·∫Øt ƒë·∫ßu ki·ªÉm tra ƒë·∫°o vƒÉn"""
        text = self.text_area.get(1.0, tk.END).strip()
        
        if not text:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra!")
            return
            
        # Test API connection
        if not self.checker.test_connection():
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi API. Ki·ªÉm tra l·∫°i c·∫•u h√¨nh!")
            return
        
        # Disable button v√† show progress
        self.check_btn.config(state=tk.DISABLED)
        self.show_progress()
        
        # Start checking in separate thread
        thread = threading.Thread(target=self.check_plagiarism, args=(text,))
        thread.daemon = True
        thread.start()
        
    def check_plagiarism(self, text):
        """Ki·ªÉm tra ƒë·∫°o vƒÉn (ch·∫°y trong thread ri√™ng)"""
        try:
            def progress_callback(current, total, sentence):
                self.root.after(0, self.update_progress, current, total, sentence)
            
            report = self.checker.check_text(text, progress_callback)
            self.root.after(0, self.show_results, report)
            
        except Exception as e:
            self.root.after(0, self.show_error, str(e))
        finally:
            self.root.after(0, self.hide_progress)
            
    def update_progress(self, current, total, sentence):
        """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh"""
        percentage = (current / total) * 100
        self.progress_bar['value'] = percentage
        self.progress_var.set(f"ƒêang ki·ªÉm tra c√¢u {current}/{total}: {sentence[:50]}...")
        
    def show_progress(self):
        """Hi·ªÉn th·ªã progress bar"""
        self.progress_frame.pack(fill=tk.X, pady=(0, 10))
        self.progress_label.pack(pady=5)
        self.progress_bar.pack(pady=5)
        
    def hide_progress(self):
        """·∫®n progress bar"""
        self.progress_frame.pack_forget()
        self.check_btn.config(state=tk.NORMAL)
        
    def show_results(self, report):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£"""
        self.current_report = report
        self.results_frame.pack(fill=tk.BOTH, expand=True)
        
        # Clear previous results
        for widget in self.summary_frame.winfo_children():
            widget.destroy()
        for widget in self.details_frame.winfo_children():
            widget.destroy()
        for widget in self.recommendations_frame.winfo_children():
            widget.destroy()
            
        # Show summary
        self.show_summary(report['summary'])
        
        # Show details
        self.show_details(report['detailed_results'])
        
        # Show recommendations
        self.show_recommendations(report['recommendations'])
        
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
    def show_summary(self, summary):
        """Hi·ªÉn th·ªã t·ªïng quan"""
        # Risk level v·ªõi m√†u s·∫Øc
        risk_color = COLORS[summary['risk_level']]
        
        # Main stats
        stats_frame = tk.Frame(self.summary_frame, bg=COLORS['WHITE'])
        stats_frame.pack(fill=tk.X, padx=20, pady=20)
        
        # Risk level indicator
        risk_frame = tk.Frame(stats_frame, bg=risk_color, relief=tk.RAISED, bd=2)
        risk_frame.pack(fill=tk.X, pady=(0, 15))
        
        risk_label = tk.Label(
            risk_frame,
            text=f"üéØ M·ª®C ƒê·ªò R·ª¶I RO: {summary['risk_level']}",
            font=("Arial", 14, "bold"),
            fg=COLORS['WHITE'],
            bg=risk_color
        )
        risk_label.pack(pady=10)
        
        # Statistics
        stats_text = f"""
üìä TH·ªêNG K√ä CHI TI·∫æT:

‚Ä¢ T·ªïng s·ªë c√¢u ki·ªÉm tra: {summary['total_sentences']}
‚Ä¢ C√¢u c√≥ d·∫•u hi·ªáu ƒë·∫°o vƒÉn: {summary['plagiarized_sentences']}
‚Ä¢ T·ª∑ l·ªá ƒë·∫°o vƒÉn: {summary['plagiarism_percentage']}%
‚Ä¢ ƒê·ªô t∆∞∆°ng ƒë·ªìng trung b√¨nh: {summary['average_similarity']}%
‚Ä¢ API requests s·ª≠ d·ª•ng: {summary['requests_used']}/{MAX_REQUESTS_PER_DAY}
        """
        
        stats_label = tk.Label(
            stats_frame,
            text=stats_text,
            font=("Arial", 11),
            bg=COLORS['WHITE'],
            justify=tk.LEFT
        )
        stats_label.pack(anchor=tk.W)
        
    def show_details(self, results):
        """Hi·ªÉn th·ªã chi ti·∫øt"""
        # Scrollable frame for details
        canvas = tk.Canvas(self.details_frame, bg=COLORS['WHITE'])
        scrollbar = ttk.Scrollbar(self.details_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=COLORS['WHITE'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Show problematic sentences
        problematic = [r for r in results if r['is_plagiarism']]
        
        if problematic:
            for i, result in enumerate(problematic, 1):
                self.create_detail_item(scrollable_frame, i, result)
        else:
            no_issues_label = tk.Label(
                scrollable_frame,
                text="‚úÖ Kh√¥ng ph√°t hi·ªán c√¢u n√†o c√≥ v·∫•n ƒë·ªÅ!",
                font=("Arial", 12),
                bg=COLORS['WHITE'],
                fg=COLORS['LOW']
            )
            no_issues_label.pack(pady=50)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_detail_item(self, parent, index, result):
        """T·∫°o item chi ti·∫øt cho m·ªôt c√¢u"""
        # Main frame for this result
        item_frame = tk.LabelFrame(
            parent,
            text=f"C√¢u {index}",
            font=("Arial", 10, "bold"),
            bg=COLORS['WHITE'],
            fg=COLORS['SECONDARY']
        )
        item_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Sentence text
        sentence_label = tk.Label(
            item_frame,
            text=f"üìù {result['sentence']}",
            font=("Arial", 10),
            bg=COLORS['WHITE'],
            wraplength=700,
            justify=tk.LEFT
        )
        sentence_label.pack(anchor=tk.W, padx=10, pady=5)
        
        # Similarity info
        similarity_text = f"üìä ƒê·ªô t∆∞∆°ng ƒë·ªìng: {result['similarity']:.1%} ({result['confidence']})"
        similarity_label = tk.Label(
            item_frame,
            text=similarity_text,
            font=("Arial", 9),
            bg=COLORS['WHITE'],
            fg=COLORS['MEDIUM']
        )
        similarity_label.pack(anchor=tk.W, padx=10)
        
        # Source info
        if result['source']:
            source_label = tk.Label(
                item_frame,
                text=f"üîó Ngu·ªìn: {result['source']}",
                font=("Arial", 9),
                bg=COLORS['WHITE'],
                fg=COLORS['PRIMARY'],
                cursor="hand2"
            )
            source_label.pack(anchor=tk.W, padx=10, pady=(0, 5))
        
    def show_recommendations(self, recommendations):
        """Hi·ªÉn th·ªã khuy·∫øn ngh·ªã"""
        rec_text = "\n".join([f"‚Ä¢ {rec}" for rec in recommendations])
        
        rec_label = tk.Label(
            self.recommendations_frame,
            text=rec_text,
            font=("Arial", 11),
            bg=COLORS['WHITE'],
            justify=tk.LEFT,
            wraplength=700
        )
        rec_label.pack(anchor=tk.W, padx=20, pady=20)
        
    def show_error(self, error_msg):
        """Hi·ªÉn th·ªã l·ªói"""
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {error_msg}")
        
    def run(self):
        """Ch·∫°y GUI"""
        self.root.mainloop()

def main():
    app = PlagiarismGUI()
    app.run()

if __name__ == "__main__":
    main()